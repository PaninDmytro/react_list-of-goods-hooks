{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","typeOfSort","setTypeOfSort","isReversed","setIsReversed","visibleEffects","goods","preparedGoods","sort","good1","good2","Alphabeticaly","localeCompare","Length","length","reverse","getPreparedGoods","handleSort","sortType","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,8BAAAA,E,iBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,WAAYE,EACd,EADcA,WAEVI,EAAa,YAAOD,GAqBxB,OAnBIL,IACFM,EAAgBA,EAAcC,MAAK,SAACC,EAAOC,GACzC,OAAQT,GACN,KAAKJ,EAASc,cACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,OAKXX,GACFI,EAAcQ,UAGTR,EAMgBS,CACrBlB,EAAiB,CAAEG,aAAYE,eAG3Bc,EAAa,SAACC,GAClBhB,EAAcgB,IAQhB,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBtB,EAASc,gBAAkBV,GAAc,YACtEoB,QAAS,kBAAMJ,EAAWpB,EAASc,gBAHrC,iCAQA,wBACES,KAAK,SACLD,UAAS,yBAAoBtB,EAASgB,SAAWZ,GAAc,YAC/DoB,QAAS,kBAAMJ,EAAWpB,EAASgB,SAHrC,4BAQA,wBACEO,KAAK,SACLD,UAAS,6BAAwBhB,GAAc,YAC/CkB,QAAS,kBAAMjB,GAAeD,IAHhC,sBAQEF,GAAcE,IACd,wBACEiB,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAnCjBnB,EAAc,SACdE,GAAc,IA+BR,sBAUJ,6BACGC,EAAeiB,KAAI,SAAAC,GAAI,OACtB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC5GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.35ee83d0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabeticaly = 'Alphabeticaly',\n  Length = 'Length',\n}\n\ninterface SortParametrs {\n  typeOfSort: string;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { typeOfSort, isReversed }: SortParametrs,\n) {\n  let preparedGoods = [...goods];\n\n  if (typeOfSort) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (typeOfSort) {\n        case SortType.Alphabeticaly:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [typeOfSort, setTypeOfSort] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleEffects = getPreparedGoods(\n    goodsFromServer, { typeOfSort, isReversed },\n  );\n\n  const handleSort = (sortType: SortType) => {\n    setTypeOfSort(sortType);\n  };\n\n  const handleReset = () => {\n    setTypeOfSort('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${SortType.Alphabeticaly !== typeOfSort && 'is-light'}`}\n          onClick={() => handleSort(SortType.Alphabeticaly)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-info ${SortType.Length !== typeOfSort && 'is-light'}`}\n          onClick={() => handleSort(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${!isReversed && 'is-light'}`}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(typeOfSort || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => handleReset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleEffects.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}